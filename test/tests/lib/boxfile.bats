# Test the boxfile functionality

# source the Nos framework
. /opt/nos/common.sh

# source the nos test helper
. util/nos.sh

# source stub.sh to stub functions and binaries
. util/stub.sh

# initialize nos
nos_init

# source the nodejs libraries
. ${engine_lib_dir}/nodejs.sh

# ensure /tmp/code exists and can be used as the code_dir
setup() {
  mkdir -p /tmp/code
}

# ensure /tmp/code is clean after each test
teardown() {
  rm -rf /tmp/code
}

@test "generates build section with lib_dirs" {

  stub_and_echo "nodejs_can_exec" "false"
  stub_and_echo "nodejs_exec_cmd" "false"
  stub_and_echo "nodejs_asset_lib_dirs_json" \
    "[\"node_modules\", \"bower_components\"]"

  boxfile=$(nodejs_generate_boxfile)

  restore "nodejs_can_exec"
  restore "nodejs_exec_cmd"
  restore "nodejs_asset_lib_dirs_json"

  expected="$(cat <<-END
build:
  lib_dirs:
      - node_modules
      - bower_components
END
)"

  [ "$boxfile" = "$expected" ]
}

@test "generates a web section if the app can exec" {

  stub_and_echo "nodejs_can_exec" "true"
  stub_and_echo "nodejs_exec_cmd" "node app.js"
  stub_and_echo "nodejs_asset_lib_dirs_json" \
    "[\"node_modules\", \"bower_components\"]"

  boxfile=$(nodejs_generate_boxfile)

  restore "nodejs_can_exec"
  restore "nodejs_exec_cmd"
  restore "nodejs_asset_lib_dirs_json"

  expected="$(cat <<-END
build:
  lib_dirs:
      - node_modules
      - bower_components
web1:
  ports:
    - 80:8080
    - 443:8080
  exec: node app.js
END
)"

  [ "$boxfile" = "$expected" ]
}

@test "boxfile report is empty for dev mode" {

  nos_init "$(cat <<-END
{
  "run": false
}
END
)"

  report=$(nodejs_report_boxfile 2>&1)

  expected="$(cat <<-END
+> Generating Boxfile
END
)"

  [ "$report" = "$expected" ]
}

@test "boxfile report is empty when web1 is already defined" {

  nos_init "$(cat <<-END
{
  "code_dir": "/tmp/code",
  "run": true
}
END
)"

  cat > /tmp/code/Boxfile <<-END
web1:
  exec: "node app.js"
END

  report=$(nodejs_report_boxfile 2>&1)

  expected="$(cat <<-END
+> Generating Boxfile
END
)"

  [ "$report" = "$expected" ]
}

@test "boxfile report explains when cannot be autogenerated" {

  nos_init "$(cat <<-END
{
  "code_dir": "/tmp/code",
  "run": true
}
END
)"

  stub_and_echo "nodejs_exec_cmd" "false"

  report=$(nodejs_report_boxfile 2>&1)

  restore "nodejs_exec_cmd"

  expected="$(cat <<-END
+> Generating Boxfile
   - web1 service cannot be auto-generated
      We're unable to determine a suitable way to run this app.
      Please provide a web1 configuration in the Boxfile.
      For additional information, please consult the documentation:
         http://engines.nanobox.io/engines/0754ca2d-70bd-45b3-996e-c96e5ef882ce
END
)"

  [ "$report" = "$expected" ]
}

@test "boxfile report explains web configuration when auto-generated" {
  nos_init "$(cat <<-END
{
  "code_dir": "/tmp/code",
  "run": true
}
END
)"

  stub_and_echo "nodejs_exec_cmd" "node app.js"

  report=$(nodejs_report_boxfile 2>&1)

  restore "nodejs_exec_cmd"

  expected="$(cat <<-END
+> Generating Boxfile
   - web1 service will be started with:
      node app.js
   - web1 service will forward http/s to port 8080
END
)"

  [ "$report" = "$expected" ]
}
